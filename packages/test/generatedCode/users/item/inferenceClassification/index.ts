// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createInferenceClassificationFromDiscriminatorValue, deserializeIntoInferenceClassification, serializeInferenceClassification, type InferenceClassification } from '../../../models/';
import { createODataErrorFromDiscriminatorValue, deserializeIntoODataError, serializeODataError, type ODataError } from '../../../models/oDataErrors/';
import { OverridesRequestBuilderNavigationMetadata, OverridesRequestBuilderRequestsMetadata, OverridesRequestBuilderUriTemplate, type OverridesRequestBuilder } from './overrides/';
import { RequestInformation, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestAdapter, type RequestConfiguration, type RequestMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /users/{user-id}/inferenceClassification
 */
export interface InferenceClassificationRequestBuilder extends BaseRequestBuilder<InferenceClassificationRequestBuilder> {
    /**
     * The overrides property
     */
    get overrides(): OverridesRequestBuilder;
    /**
     * Relevance classification of the user's messages based on explicit designations that override inferred relevance or importance.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of InferenceClassification
     */
     get(requestConfiguration?: RequestConfiguration<InferenceClassificationRequestBuilderGetQueryParameters> | undefined) : Promise<InferenceClassification | undefined>;
    /**
     * Update the navigation property inferenceClassification in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of InferenceClassification
     */
     patch(body: InferenceClassification, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<InferenceClassification | undefined>;
    /**
     * Relevance classification of the user's messages based on explicit designations that override inferred relevance or importance.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<InferenceClassificationRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property inferenceClassification in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: InferenceClassification, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Relevance classification of the user's messages based on explicit designations that override inferred relevance or importance.
 */
export interface InferenceClassificationRequestBuilderGetQueryParameters {
    /**
     * Select properties to be returned
     */
    select?: string[];
}
const InferenceClassificationRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "select": "%24select",
};
export const InferenceClassificationRequestBuilderNavigationMetadata: Record<Exclude<keyof InferenceClassificationRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    "overrides": {
        uriTemplate: OverridesRequestBuilderUriTemplate,
        requestsMetadata: OverridesRequestBuilderRequestsMetadata,
        navigationMetadata: OverridesRequestBuilderNavigationMetadata,
    },
};
export const InferenceClassificationRequestBuilderRequestsMetadata: Record<string, RequestMetadata> = {
    "get": {
        errorMappings: {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>,
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createInferenceClassificationFromDiscriminatorValue,
        queryParametersMapper: InferenceClassificationRequestBuilderGetQueryParametersMapper,
    },
    "patch": {
        errorMappings: {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>,
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createInferenceClassificationFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeInferenceClassification,
    },
};
export const InferenceClassificationRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/inferenceClassification{?%24select}";
// tslint:enable
// eslint-enable
